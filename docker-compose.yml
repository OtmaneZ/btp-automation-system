# =====================================
# Docker Compose - BTP Automation System
# Development & Production Environment
# =====================================

version: '3.8'

services:
  # ===================================
  # Main Application Service
  # ===================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-latest}
    container_name: btp-automation-app

    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-ChangeMe123!}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-your-email-password}
      - DATABASE_URL=sqlite:///app/devis.db

    ports:
      - "5000:5000"

    volumes:
      - .:/app
      - ./uploads:/app/uploads
      - ./static/qr_codes:/app/static/qr_codes
      - app-data:/app/instance

    networks:
      - btp-network

    restart: unless-stopped

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================
  # Redis Cache (for production scaling)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: btp-automation-redis

    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev-redis-password}

    ports:
      - "6379:6379"

    volumes:
      - redis-data:/data

    networks:
      - btp-network

    restart: unless-stopped

    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================
  # PostgreSQL Database (production alternative)
  # ===================================
  postgres:
    image: postgres:15-alpine
    container_name: btp-automation-postgres

    environment:
      POSTGRES_DB: ${POSTGRES_DB:-btp_automation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev-postgres-password}

    ports:
      - "5432:5432"

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql

    networks:
      - btp-network

    restart: unless-stopped

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================
  # Nginx Reverse Proxy (production)
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: btp-automation-nginx

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro

    depends_on:
      - app

    networks:
      - btp-network

    restart: unless-stopped

  # ===================================
  # Monitoring with Prometheus
  # ===================================
  prometheus:
    image: prom/prometheus:latest
    container_name: btp-automation-prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

    ports:
      - "9090:9090"

    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    networks:
      - btp-network

    restart: unless-stopped

# =====================================
# Named Volumes for Data Persistence
# =====================================
volumes:
  app-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local

# =====================================
# Custom Network for Inter-service Communication
# =====================================
networks:
  btp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
